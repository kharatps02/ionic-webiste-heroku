# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.18.3"

default_platform :ios

platform :ios do
  before_all do
   #cocoapods 
  end


  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :qa do
    match(type: "adhoc") # more information: https://codesigning.guide
    gym(project: "./platforms/ios/Rezility.xcodeproj",
    scheme: "Rezility",
   # clean: true,
    output_directory: "qa", # Destination directory. Defaults to current directory.
    output_name: "Rezility_qa.ipa", # specify the name of the .ipa file to generate (including file extension)
    )        
    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    match(type: "appstore") # more information: https://codesigning.guide
    gym(project: "./platforms/ios/Rezility.xcodeproj",
    scheme: "Rezility",
    clean: true,
    output_directory: "beta", # Destination directory. Defaults to current directory.
    output_name: "Rezility_Beta.ipa", # specify the name of the .ipa file to generate (including file extension)
    )     
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    # gym(scheme: "Rezility") # Build your app - more options available
    # deliver(force: true)
    # frameit
  end

end

#platform :android do
#  lane :qa_android do
#    gradle(
#     task: "cdvBuildRelease",
#      project_dir: "platforms/android/",
#    )
#    Dir.chdir ".." do
#      sh("mkdir -p builds/#{Time.now.strftime('%F')}/")
#      sh("cp -f platforms/android/build/outputs/apk/android-release.apk builds/#{Time.now.strftime('%F')}/")
#    end
#  end

#end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
